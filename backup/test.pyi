# <editor-fold desc="Test">
class TestBase(Base):
    classvar: ClassVar[int] = ...
    initvar: InitVar[int] = ...
    __slots__: tuple[str, ...] = ...
    __hash_exclude__: tuple[str, ...] = ...
    __repr_exclude__: tuple[str, ...] = ...
    async def method_async(self) -> NoReturn: ...
    @classmethod
    def clsmethod(cls) -> NoReturn: ...
    @staticmethod
    def static() -> NoReturn: ...
    @pproperty
    def pprop(self) -> str: ...
    @pproperty
    async def pprop_async(self) -> str: ...
    @property
    def prop(self) -> Any: ...
    @prop.setter
    def prop(self, value: Any) -> None: ...
    @prop.deleter
    def prop(self) -> None: ...
@dataclass
class TestData:
    dataclass_classvar: ClassVar[str] = ...
    dataclass_default: str = ...
    dataclass_default_factory: Union[dict, str] = ...
    dataclass_default_factory_init: Union[dict, str] = ...
    dataclass_default_init: str = ...
    dataclass_initvar: InitVar[str] = ...
    dataclass_str: str = ...
    def __post_init__(self, dataclass_initvar: str) -> None: ...
    def __class_getitem__(cls, item: Any) -> GenericAlias: ...
class TestDataDictMix(TestData):
    subclass_annotated_str: str = ...
    subclass_classvar: ClassVar[str] = ...
    subclass_str: str = ...
    def __init__(self, dataclass_initvar: str = ..., subclass_dynamic: str = ...,) -> None: ...
class TestDataDictSlotMix(TestDataDictMix):
    __slots__ = ('_slot_property', 'slot', )
    _slot_property: str
    slot: str
    def __init__(self, dataclass_initvar: str =  ..., slot_property: str =  ..., slot: str =  ...) -> None: ...
    @pproperty
    def slot_property(self) -> str: ...
# </editor-fold>
