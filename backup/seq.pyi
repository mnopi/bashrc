
class Seq(Sequence[_ST_co]):
    __builtin__: Type[GetItemSupportType] = ...
    __slots__: tuple[str, ...] = ...
    _rv: list = ...
    @abstractmethod
    def __new__(cls, *args: Any, **kwargs: Any): ...
    @abstractmethod
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    @overload
    @abstractmethod
    def __getitem__(self, i: int) -> _ST_co: ...
    @overload
    @abstractmethod
    def __getitem__(self, s: slice) -> Seq[_ST_co]: ...
    def all_allin(self, *args: Any, **kwargs: _VT) -> Union[Any, Seq[_ST_co], slist[Any, ...], stuple[Any, ...]]: ...
    def all_anyin(self, *args: Any, **kwargs: _VT) -> Union[Any, Seq[_ST_co], slist[Any, ...], stuple[Any, ...]]: ...
    def first_allin(self, *args: Any, **kwargs: _VT) -> Any: ...
    def first_anyin(self, *args: Any, **kwargs: _VT) -> Any: ...
    @overload
    def get(self, *args: str) -> Union[Any, Seq[_ST_co], slist[Any, ...], stuple[Any, ...]]: ...
    @overload
    def get(self, *args: str,
            **kwargs: Union[Callable, _VT]) -> Union[Any, Seq[_ST_co], slist[Any, ...], stuple[Any, ...]]: ...
    @property
    def rv(self) -> Union[Any, Seq[_ST_co], slist[Any, ...], stuple[Any, ...]]: ...
    @rv.setter
    def rv(self, value: Any) -> None: ...
    @rv.deleter
    def rv(self) -> None: ...
    @overload
    def value(self, *args: str) -> Union[Any, Seq[_ST_co], slist[Any, ...], stuple[Any, ...]]: ...
    @overload
    def value(self, *args: str, **kwargs: Callable) -> Union[Any, Seq[_ST_co], slist[Any, ...], stuple[Any, ...]]: ...
