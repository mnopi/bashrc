class Cls:
    __slots__: tuple[str, ...] = ...
    args: dict[str, Any]
    asdict: dict[str, Any]
    attr: Es
    builtin: bool
    cache: dict[str, Attribute]
    cached_property: dict[str, Attribute]
    classified: dict[str, Attribute]
    classmethod: dict[str, Attribute]
    classvar: dict[str, Union[Field, ClassVar]]
    coro: list[str]
    data: Types
    defaults: dict[str, Any]
    dir: list[str]
    dynamicclassattribute: dict[str, DynamicClassAttribute]
    es: Es
    factory: dict[str, Any]
    fields: dict[str, Field]
    ignore: bool
    initvar: dict[str, Field]
    key: Attr
    kwargs: dict[str, Any]
    method: dict[str, Attribute]
    mro: tuple[Type, ...]
    name: str
    pproperty: dict[str, Attribute]
    prop: dict[str, Attribute]
    property_any: dict[str, Attribute]
    slots: list[str]
    staticmethod: dict[str, Attribute]
    def __init__(self, data: Any, ignore: bool = ..., key: Attr = ...) -> None:...
    def __call__(self, ignore: bool = ..., key: Attr = ...) -> Cls:...
    @property
    def _builtinclass(self) -> dict[str, Any]:...
    @property
    def _builtinfunctiontype(self) -> dict[str, Any]:...
    @property
    def _by_kind(self) -> bucket[defaultdict[str, deque[Attribute]]]: ...
    @property
    def _by_name(self) -> bucket[defaultdict[str, deque[Attribute]]]: ...
    @property
    def _cache(self) -> dict[str, Any]:...
    @property
    def _cached_property(self) -> dict[str, Any]:...
    @property
    def _callable(self) -> dict[str, Any]: ...
    @property
    def _classmethod(self) -> dict[str, Any]: ...
    @property
    def _deleter(self) -> dict[str, Any]: ...
    @property
    def _dir(self) -> list[str]: ...
    def has_attr(self, name: str) -> bool: ...
    def has_method(self, name: str) -> bool: ...
    @property
    def has_reduce(self) -> bool: ...
    @property
    def importable_name(self) -> str: ...
    @functools.cache
    def is_attr(self, name: str) -> bool: ...
    @functools.cache
    def is_callable(self, name: str) -> bool: ...
    @functools.cache
    def is_classmethod(self, name: str) -> bool: ...
    @functools.cache
    def is_classvar(self, name: str) -> bool:...
    @functools.cache
    def is_data(self, name: str) -> bool: ...
    @functools.cache
    def is_deleter(self, name: str) -> bool: ...
    @functools.cache
    def is_datafactory(self, name: str) -> bool:...
    @functools.cache
    def is_datafield(self, name: str) -> bool:...
    @functools.cache
    def is_initvar(self, name: str) -> bool:...
    @functools.cache
    def is_memberdescriptor(self, name: str) -> bool: ...
    @functools.cache
    def is_method(self, name: str) -> bool: ...
    @functools.cache
    def is_methoddescriptor(self, name: str) -> bool: ...
    @functools.cache
    def is_pproperty(self, name: str) -> bool: ...
    @functools.cache
    def is_property(self, name: str) -> bool: ...
    @functools.cache
    def is_routine(self, name: str) -> bool: ...
    @functools.cache
    def is_setter(self, name: str) -> bool: ...
    @functools.cache
    def is_staticmethod(self, name: str) -> bool: ...
    @property
    def _mappingproxytype(self) -> dict[str, Any]: ...
    @property
    def _memberdescriptor(self) -> dict[str, Any]: ...
    @property
    def _method(self) -> dict[str, Any]: ...
    @property
    def _methoddescriptor(self) -> dict[str, Any]: ...
    @property
    def _methodwrappertype(self) -> dict[str, Any]: ...
    @property
    def _modname(self) -> str: ...
    @property
    def _mro(self) -> tuple[Type]: ...
    @property
    def _name(self) -> str: ...
    @property
    def _pproperty(self) -> dict[str, Any]: ...
    @property
    def _prop(self) -> dict[str, Any]: ...
    @property
    def _property_any(self) -> dict[str, Any]: ...
    @property
    def _routine(self) -> dict[str, Any]: ...
    @property
    def _setter(self) -> dict[str, Any]: ...
