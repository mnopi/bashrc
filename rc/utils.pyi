# -*- coding: utf-8 -*-
"""Utils Module."""
import pathlib
from abc import ABCMeta
from abc import abstractmethod
from ast import AST
from asyncio.events import _RunningLoop
from collections import defaultdict
from collections import deque
from enum import Enum
from functools import cache
from functools import partial
from functools import singledispatch
from functools import singledispatchmethod
from inspect import Attribute
from inspect import FrameInfo
from operator import attrgetter
from os import PathLike
from pathlib import Path as PathLib
from subprocess import CompletedProcess
from types import FrameType
from types import ModuleType
from types import TracebackType
from typing import _alias
from typing import Any
from typing import Callable
from typing import ChainMap
from typing import Generic
from typing import Iterable
from typing import MutableMapping
from typing import NamedTuple
from typing import Optional
from typing import OrderedDict
from typing import Protocol
from typing import runtime_checkable
from typing import Type
from typing import TypeVar
from typing import Union

from box import Box
from devtools import Debug
from icecream import IceCreamDebugger
from more_itertools import bucket
from rich import Console

_A = TypeVar('_A', bound='Attr')
_C = TypeVar('_C', bound='ChainRV')
_E = TypeVar('_E', bound='Executor')
_N = TypeVar('_N', bound='Name')
_T = TypeVar('_T')
_U = TypeVar('_U')

__all__: tuple
BUILTIN_CLASSES: Iterable[Type]
FRAME_SYS_INIT: FrameType
FUNCTION_MODULE: str
NEWLINE: str
PYTHON_SYS: str
PYTHON_SITE: pathlib.Path
Alias = _alias
console: Console
debug: Debug
fmic: IceCreamDebugger().format
fmicc: IceCreamDebugger().format
ic: IceCreamDebugger
icc: IceCreamDebugger
POST_INIT_NAME: str
pp: console.print
print_exception: console.print_exception
RunningLoop = _RunningLoop

class pproperty(property):
    def __init__(self, fget: Callable = ..., fset: Callable = ..., fdel: Callable = ..., doc: str = ...) -> None: ...
Annotation = NamedTuple('Annotation', args=list[Type, ...], cls=Type, hints=dict, key=str, origin=Type)
class AnnotationsType(metaclass=ABCMeta):
    @classmethod
    def __subclasshook__(cls, C: Type) -> bool: ...
class AsDictClassMethodType(metaclass=ABCMeta):
    @classmethod
    def __subclasshook__(cls, C: Type) -> bool: ...
    @classmethod
    def asdict(cls, *args: Any, **kwargs: Any) -> dict[str, Any]: ...
class AsDictMethodType(metaclass=ABCMeta):
    @classmethod
    def __subclasshook__(cls, C: Type) -> bool: ...
    def asdict(self, *args: Any, **kwargs: Any) -> dict[str, Any]: ...
class AsDictPropertyType(metaclass=ABCMeta):
    @classmethod
    def __subclasshook__(cls, C: Type) -> bool: ...
    @property
    def asdict(self) -> dict[str, Any]: ...
class AsDictStaticMethodType(metaclass=ABCMeta):
    @classmethod
    def __subclasshook__(cls, C: Type) -> bool: ...
    @staticmethod
    def asdict(*args: Any, **kwargs: Any) -> dict[str, Any]: ...
class Attr(Enum, Generic[_A]):
    ALL: _A
    PRIVATE: _A
    PUBLIC: _A
    def include(self, obj: str) -> bool: ...
class Base:
    __slots__: tuple[str]
    def __getattribute__(self, name: str, default: Optional[Any, partial] = ...) -> Any: ...
    def get(self, name: str, default: Union[Any, partial] = ...) -> Any: ...
class Base1:
    __slots__: tuple[str]
    __hash_exclude__: tuple[str]
    __repr_exclude__: tuple[str]
    def __getattribute__(self, name: str, default: Optional[Any, partial] = ...) -> Any: ...
    def __hash__(self) -> int: ...
    def __repr__(self) -> str: ...
    def get(self, name: str, default: Union[Any, partial] = ...) -> Any: ...
    @property
    def cls_name(self) -> str: ...
    @staticmethod
    def get_mroattr(cls: Type, name: str = ...) -> set[str]: ...
    @classmethod
    def get_mrohash(cls) -> set[str]: ...
    @classmethod
    def get_mrorepr(cls) -> list[str]: ...
    @classmethod
    def get_mroslots(cls) -> set[str]: ...
    @staticmethod
    def get_propnew(name: str, default: Optional[Any, partial] = ...) -> property: ...
class BoxKeys(Box[str, str]):
    def __init__(self, keys: Iterable, lower: bool = ...) -> None: ...
class ChainRV(Enum):
    ALL: _C
    FIRST: _C
    UNIQUE: _C
class Chain(ChainMap):
    rv: ChainRV
    default: Any
    maps: list[Union[Iterable, NamedType, MutableMapping]]
    def __init__(self, *maps: ..., rv: ChainRV = ..., default: Any = ...) -> None: ...
    def __getitem__(self, key: str) -> Any: ...
    def __delitem__(self, key: str) -> None: ...
    def delete(self, key: str) -> None: ...
    def __setitem__(self, key: str, value: Any) -> None: ...
    def set(self, key: str, value: Any) -> None: ...
class CmdError(Exception):
    def __init__(self, rv: CompletedProcess) -> None: ...
class CmdAioError(CmdError):
    def __init__(self, rv: CompletedProcess) -> None: ...
class DataType(metaclass=ABCMeta):
    @classmethod
    def __subclasshook__(cls, C: Type) -> bool: ...
class DictType(metaclass=ABCMeta):
    @classmethod
    def __subclasshook__(cls, C: Type) -> bool: ...
class EnumDict(Enum):
    @classmethod
    def asdict(cls) -> dict: ...
    @classmethod
    def attrs(cls) -> list: ...
    @classmethod
    def default(cls) -> Any: ...
    @classmethod
    def default_attr(cls) -> str: ...
    @classmethod
    def default_dict(cls) -> dict: ...
    @classmethod
    def default_value(cls) -> Any: ...
    @property
    def describe(self) -> tuple: ...
    @property
    def lower(self) -> str: ...
    def prefix(self, prefix: str) -> str: ...
    @classmethod
    def values(cls) -> list: ...
EnumDictType: Alias
class Es:
    __slots__: tuple
    data: Any
    def __init__(self, data: Any = ...) -> None:...
    def __call__(self, *args: Type) -> bool:...
    @property
    def asyncfor(self) -> bool:...
    @property
    def asyncfunctiondef(self) -> bool:...
    @property
    def asyncwith(self) -> bool:...
    @property
    def annotationstype(self) -> bool:...
    @property
    def annotationstype_sub(self) -> bool:...
    @property
    def asdict_classmethodtype(self) -> bool:...
    @property
    def asdict_classmethodtype_sub(self) -> bool:...
    @property
    def asdict_methodtype(self) -> bool:...
    @property
    def asdict_methodtype_sub(self) -> bool:...
    @property
    def asdict_propertytype(self) -> bool:...
    @property
    def asdict_propertytype_sub(self) -> bool:...
    @property
    def asdict_staticmethodtype(self) -> bool:...
    @property
    def asdict_staticmethodtype_sub(self) -> bool:...
    @property
    def ast(self) -> bool:...
    @property
    def asyncgen(self) -> bool:...
    @property
    def asyncgenfunc(self) -> bool:...
    def attr(self, name: str) -> bool:...
    @property
    def await_ast(self) -> bool:...
    @property
    def awaitable(self) -> bool:...
    @property
    def bool(self) -> bool:...
    @property
    def builtinfunctiontype(self) -> bool:...
    @property
    def binaryio(self) -> bool:...
    @property
    def chain(self) -> bool:...
    @property
    def chainmap(self) -> bool:...
    @property
    def classdef(self) -> bool:...
    @property
    def classmethod(self) -> bool:...
    @property
    def codetype(self) -> bool:...
    @property
    def collections(self) -> bool:...
    @property
    def coro(self) -> bool:...
    @property
    def coroutine(self) -> bool:...
    @property
    def coroutinefunc(self) -> bool:...
    @property
    def datatype(self) -> bool:...
    @property
    def datatype_sub(self) -> bool:...
    @property
    def defaultdict(self) -> bool:...
    @property
    def dict(self) -> bool:...
    @property
    def dicttype(self) -> bool:...
    @property
    def dicttype_sub(self) -> bool:...
    @property
    def dlst(self) -> bool:...
    @property
    def enum(self) -> bool:...
    @property
    def enum_sub(self) -> bool:...
    @property
    def enumdict(self) -> bool:...
    @property
    def enumdict_sub(self) -> bool:...
    @property
    def even(self) -> bool:...
    @property
    def float(self) -> bool:...
    @property
    def frameinfo(self) -> bool:...
    @property
    def frametype(self) -> bool:...
    @property
    def functiondef(self) -> bool:...
    @property
    def functiontype(self) -> bool:...
    @property
    def generator(self) -> bool:...
    @property
    def getattrnobuiltintype(self) -> bool:...
    @property
    def getattrnobuiltintype_sub(self) -> bool:...
    @property
    def getattrtype(self) -> bool:...
    @property
    def getattrtype_sub(self) -> bool:...
    @property
    def gettype(self) -> bool:...
    @property
    def gettype_sub(self) -> bool:...
    @property
    def getsetdescriptor(self) -> bool:...
    @property
    def hashable(self) -> bool:...
    @property
    def import_ast(self) -> bool:...
    @property
    def importfrom(self) -> bool:...
    @property
    def installed(self) -> bool:...
    def instance(self, *args: Type) -> bool:...
    @property
    def int(self) -> bool:...
    @property
    def io(self) -> bool:...
    @property
    def iterable(self) -> bool:...
    @property
    def iterator(self) -> bool:...
    @property
    def lambdatype(self) -> bool:...
    @property
    def list(self) -> bool:...
    @property
    def lst(self) -> bool:...
    @property
    def mlst(self) -> bool:...
    @property
    def mm(self) -> bool:...
    @property
    def method(self) -> bool:...
    @property
    def moduletype(self) -> bool:...
    @property
    def module_function(self) -> bool:...
    @property
    def noncomplex(self) -> bool:...
    @property
    def namedtype(self) -> bool:...
    @property
    def namedtype_sub(self) -> bool:...
    @property
    def named_annotationstype(self) -> bool:...
    @property
    def named_annotationstype_sub(self) -> bool:...
    @property
    def object(self) -> bool:...
    @property
    def pathlib(self) -> bool:...
    def picklable(self, name: str) -> bool:...
    @property
    def primitive(self) -> bool:...
    @property
    def prop(self) -> bool:...
    @property
    def pproperty(self) -> bool:...
    @property
    def reducible(self) -> bool:...
    @property
    def reducible_sequence_subclass(self) -> bool:...
    @property
    def sequence(self) -> bool:...
    @property
    def sequence_subclass(self) -> bool:...
    @property
    def slotstype(self) -> bool:...
    @property
    def slotstype_sub(self) -> bool:...
    @property
    def staticmethod(self) -> bool:...
    @property
    def source(self) -> bool:...
    @property
    def textio(self) -> bool:...
    @property
    def tracebacktype(self) -> bool:...
    @property
    def tuple(self) -> bool:...
    @property
    def type(self) -> bool:...
    @property
    def unicode(self) -> bool:...
class Executor(Enum, Generic[_E]):
    PROCESS: _E
    THREAD: _E
    NONE: _E
    async def run(self, func: Any, *args: Any, **kwargs: Any) -> Any: ...
class GetAttrNoBuiltinType(metaclass=ABCMeta):
    def __getattribute__(self, name: str) -> Any: ...
    @classmethod
    def __subclasshook__(cls, C: Type) -> bool: ...
class GetAttrType(metaclass=ABCMeta):
    def __getattribute__(self, name: str) -> Any: ...
    @classmethod
    def __subclasshook__(cls, C: Type) -> bool: ...
@runtime_checkable
class GetSupport(Protocol):
    __slots__: tuple
    @abstractmethod
    def get(self, name: str, default: Any = ...) -> Any: ...
class GetType(metaclass=ABCMeta):
    @classmethod
    def __subclasshook__(cls, C: Type) -> bool: ...
    def get(self, name: str, default: Any = ...) -> bool: ...
class Name(Enum, Generic[_N]):
    _all0: _N
    _class0: _N
    _annotations0: _N
    _builtins0: _N
    _cached0: _N
    _code0: _N
    _contains0: _N
    _dataclass_fields0: _N
    _dataclass_params0: _N
    _delattr0: _N
    _dir0: _N
    _dict0: _N
    _doc0: _N
    _eq0: _N
    _file0: _N
    _getattribute0: _N
    _hash_exclude0: _N
    _ignore_attr0: _N
    _ignore_str0: _N
    _len0: _N
    _loader0: _N
    _members0: _N
    _module0: _N
    _mro0: _N
    _name0: _N
    _package0: _N
    _qualname0: _N
    _reduce0: _N
    _repr0: _N
    _repr_exclude0: _N
    _setattr0: _N
    _slots0: _N
    _spec0: _N
    _str0: _N
    _asdict: _N
    add: _N
    append: _N
    asdict: _N
    cls_: _N
    clear: _N
    co_name: _N
    code_context: _N
    copy: _N
    count: _N
    data: _N
    endswith: _N
    extend: _N
    external: _N
    f_back: _N
    f_code: _N
    f_globals: _N
    f_lineno: _N
    f_locals: _N
    filename: _N
    frame: _N
    function: _N
    get_: _N
    globals: _N
    index: _N
    item: _N
    items: _N
    keys: _N
    kind: _N
    lineno: _N
    locals: _N
    name_: _N
    origin: _N
    obj: _N
    object: _N
    REPO: _N
    pop: _N
    popitem: _N
    PYPI: _N
    remove: _N
    reverse: _N
    self_: _N
    sort: _N
    startswith: _N
    tb_frame: _N
    tb_lineno: _N
    tb_next: _N
    update: _N
    value_: _N
    values: _N
    vars: _N
    @classmethod
    @cache
    def _attrs(cls) -> dict[bool, Iterable]: ...
    @classmethod
    @cache
    def attrs(cls) -> tuple: ...
    @singledispatchmethod
    def get(self, obj: Any, default: Any = ...) -> Any: ...
    @get.register
    def get_getattrtype(self, obj: GetAttrType, default: Any = ...) -> Any: ...
    @get.register
    def get_frameinfo(self, obj: FrameInfo, default: Any = ...) -> Any: ...
    @get.register
    def get_frametype(self, obj: FrameType, default: Any = ...) -> Any: ...
    @get.register
    def get_tracebacktype(self, obj: TracebackType, default: Any = ...) -> Any: ...
    @property
    @cache
    def getter(self) -> attrgetter: ...
    def has(self, obj: Any) -> bool: ...
    @classmethod
    def node(cls, obj: Any, complete: bool = ..., line: bool = ...) -> Union[tuple[AST, int], AST]: ...
    @classmethod
    def path(cls, obj: Any) -> PathLib: ...
    @classmethod
    @cache
    def private(cls) -> tuple: ...
    @classmethod
    @cache
    def public(cls) -> tuple: ...
    @classmethod
    @cache
    def _real(cls, name: str) -> str: ...
    @property
    def real(self) -> str: ...
    @classmethod
    def _source(cls, obj: Any, line: bool = ...) -> Optional[Union[tuple[str, int], str]]: ...
    @classmethod
    def source(cls, obj: Any, complete: bool = ..., line: bool = ...) -> Union[tuple[str, int], str]: ...
class NamedType(metaclass=ABCMeta):
    @classmethod
    def __subclasshook__(cls, C: Type) -> bool: ...
    def _asdict(self) -> dict[str, Any]: ...
class NamedAnnotationsType(metaclass=ABCMeta):
    @classmethod
    def __subclasshook__(cls, C: Type) -> bool: ...
class SlotsType(metaclass=ABCMeta):
    @classmethod
    def __subclasshook__(cls, C: Type) -> bool: ...
def aioloop() -> Optional[RunningLoop]: ...
def allin(data: Iterable, dest: Iterable) -> bool: ...
def annotations(origin: Any, destination: int = ...) -> Union[dict[str, Annotation]: ...]: ...
def anyin(data: Iterable, dest: Iterable) -> Optional[Any]: ...
def cmd(command: Iterable,
        exc: bool = ...,
        lines: bool = ...,
        shell: bool = ...,
        py: bool = ...,
        pysite: bool = ...) -> Union[CompletedProcess, int, list, str]: ...
def cmdname(func: Callable, sep: str = ...) -> str: ...
def current_task_name() -> str: ...
@singledispatch
def delete(data: Union[MutableMapping, list], key: Iterable = ...) -> Optional[dict]: ...
@delete.register
def delete_list(data: list, key: Iterable = ...) -> Optional[list]: ...
def dict_sort(data: dict, ordered: bool = ..., reverse: bool = ...) -> Union[dict, OrderedDict]:...
def get(data: Any, name: str, default: Any = ...) -> Any: ...
class info:
    __slots__: tuple
    data: Any
    es: Es
    key: Attr
    def __init__(self, data: Any = ..., key: Attr = ...) -> None:...
    def __call__(self, data: Optional[Any] = ..., key: Optional[Attr] = ...) -> info:...
    @property
    def cls(self) -> Type:...
    @cache
    def cls_attr_value(self, name: str, default: Any = ...) -> dict[str, Attribute]:...
    @property
    @cache
    def cls_by_kind(self) -> bucket[defaultdict[str, deque[Attribute]]]:...
    @property
    @cache
    def cls_by_name(self) -> bucket[defaultdict[str, deque[Attribute]]]:...
    @property
    @cache
    def cls_callables(self) -> dict[str, Attribute]:...
    @property
    @cache
    def cls_classified(self) -> list[Attribute]:...
    @property
    @cache
    def cls_classmethods(self) -> list[str]:...
    @property
    @cache
    def cls_data(self) -> list[str]:...
    @property
    def cls_dir(self) -> list[str]:...
    @property
    @cache
    def cls_methods(self) -> list[str]:...
    @property
    def cls_module_var(self) -> bool:...
    @property
    def cls_name(self) -> bool:...
    @property
    @cache
    def cls_properties(self) -> list[str]:...
    @property
    def cls_qual_var(self) -> bool:...
    @property
    @cache
    def cls_staticmethods(self) -> list[str]:...

    def get_dir(self, public: bool = ...) -> list[str]:...
    def get_dirinstance(self, public: bool = ...) -> list[str]:...
    @property
    def get_importable_name(self) -> str:...
    @property
    def get_module(self) -> ModuleType:...
    @property
    def get_mro(self) -> Attribute:...
    def get_mroattrins(self, name: str = ...) -> tuple[str]:...
    @property
    def has_attr(self) -> bool:...
    @property
    def has_method(self) -> bool:...
    @property
    def has_reduce(self) -> bool:...
    def in_slot(self, name: str = ...) -> bool:...
def is_even(number: int) -> bool: ...
def join_newline(data: Iterable[str]) -> str: ...
def map_reduce_even(iterable: Iterable[_T]) -> list[_U, list[_T]]:...
def namedinit(cls: Type[Union[NamedAnnotationsType, NamedTuple]], optional: bool = ..., **kwargs) -> NamedTuple: ...
def noexception(
        exception: Union[tuple[Type[Exception]], Type[Exception]],
        func: Callable,
        *args,
        default_: Any = ...,
        **kwargs
) -> Any: ...
def prefixed(name: str) -> str: ...
def repr_format(obj: Any, attrs: Iterable[str], clear: bool = ..., newline: bool = ...) -> str: ...
def split_sep(sep: str = ...) -> dict: ...
def startswith(name: str, builtin: bool = ...) -> bool: ...
def to_iter(data: Any, exclude: Optional[Union[Type, tuple[Union[Type, tuple[Any, ...]], ...]]] = ...) -> list: ...
def token_open(file: Union[PathLike, PathLib, str]) -> str: ...
def varname(index: int = ..., lower: bool = ..., sep: str = ...) -> Optional[str]: ...
def black(msg: Any, bold: bool = ..., nl: bool = ..., underline: bool = ...,
          blink: bool = ..., err: bool = ..., reset: bool = ..., rc: Optional[int] = ...) -> None:...
def blue(msg: Any, bold: bool = ..., nl: bool = ..., underline: bool = ...,
         blink: bool = ..., err: bool = ..., reset: bool = ..., rc: Optional[int] = ...) -> None:...
def cyan(msg: Any, bold: bool = ..., nl: bool = ..., underline: bool = ...,
         blink: bool = ..., err: bool = ..., reset: bool = ..., rc: Optional[int] = ...) -> None:...
def green(msg: Any, bold: bool = ..., nl: bool = ..., underline: bool = ...,
          blink: bool = ..., err: bool = ..., reset: bool = ..., rc: Optional[int] = ...) -> None:...
def magenta(msg: Any, bold: bool = ..., nl: bool = ..., underline: bool = ...,
            blink: bool = ..., err: bool = ..., reset: bool = ..., rc: Optional[int] = ...) -> None:...
def red(msg: Any, bold: bool = ..., nl: bool = ..., underline: bool = ...,
        blink: bool = ..., err: bool = ..., reset: bool = ..., rc: Optional[int] = ...) -> None:...
def white(msg: Any, bold: bool = ..., nl: bool = ..., underline: bool = ...,
          blink: bool = ..., err: bool = ..., reset: bool = ..., rc: Optional[int] = ...) -> None:...
def yellow(msg: Any, bold: bool = ..., nl: bool = ..., underline: bool = ...,
           blink: bool = ..., err: bool = ..., reset: bool = ..., rc: Optional[int] = ...) -> None:...
def bblack(msg: Any, bold: bool = ..., nl: bool = ..., underline: bool = ...,
           blink: bool = ..., err: bool = ..., reset: bool = ..., rc: Optional[int] = ...) -> None:...
def bblue(msg: Any, bold: bool = ..., nl: bool = ..., underline: bool = ...,
          blink: bool = ..., err: bool = ..., reset: bool = ..., rc: Optional[int] = ...) -> None:...
def bcyan(msg: Any, bold: bool = ..., nl: bool = ..., underline: bool = ...,
          blink: bool = ..., err: bool = ..., reset: bool = ..., rc: Optional[int] = ...) -> None:...
def bgreen(msg: Any, bold: bool = ..., nl: bool = ..., underline: bool = ...,
           blink: bool = ..., err: bool = ..., reset: bool = ..., rc: Optional[int] = ...) -> None:...
def bmagenta(msg: Any, bold: bool = ..., nl: bool = ..., underline: bool = ...,
             blink: bool = ..., err: bool = ..., reset: bool = ..., rc: Optional[int] = ...) -> None:...
def bred(msg: Any, bold: bool = ..., nl: bool = ..., underline: bool = ...,
         blink: bool = ..., err: bool = ..., reset: bool = ..., rc: Optional[int] = ...) -> None:...
def bwhite(msg: Any, bold: bool = ..., nl: bool = ..., underline: bool = ...,
           blink: bool = ..., err: bool = ..., reset: bool = ..., rc: Optional[int] = ...) -> None:...
def byellow(msg: Any, bold: bool = ..., nl: bool = ..., underline: bool = ...,
            blink: bool = ..., err: bool = ..., reset: bool = ..., rc: Optional[int] = ...) -> None:...
